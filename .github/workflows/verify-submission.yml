name: Verify Image Submission

on:
  pull_request:
    paths:
      - 'submissions/**'
    types: [opened, synchronize, reopened]

jobs:
  verify-submission:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install
        cd frontend && npm install
        
    - name: Setup Nexus zkVM
      run: |
        echo "Setting up Nexus zkVM verification environment..."
        # In a real implementation, this would install Nexus zkVM CLI
        # For now, we'll create a mock verification script
        mkdir -p scripts
        cat > scripts/verify-zkvm-proof.js << 'EOF'
        const crypto = require('crypto');
        
        function verifyZKProof(proofData, manifestHash, imageHash) {
          // Mock verification - in reality this would use Nexus zkVM
          console.log('Verifying ZK proof...');
          console.log('Proof hash:', proofData.proofHash);
          console.log('Manifest hash:', manifestHash);
          console.log('Image hash:', imageHash);
          
          // Simulate verification logic
          const isValid = proofData.proofHash && 
                         manifestHash && 
                         imageHash &&
                         proofData.proofHash.length === 64;
          
          return {
            valid: isValid,
            proofHash: proofData.proofHash,
            verifiedAt: new Date().toISOString()
          };
        }
        
        module.exports = { verifyZKProof };
        EOF
        
    - name: Verify C2PA manifests
      id: verify-c2pa
      run: |
        echo "🔍 Verifying C2PA manifests..."
        
        if [ ! -d "submissions" ]; then
          echo "❌ No submissions directory found"
          exit 1
        fi
        
        # Find all manifest files
        MANIFEST_FILES=$(find submissions -name "*.json" -type f)
        
        if [ -z "$MANIFEST_FILES" ]; then
          echo "❌ No C2PA manifest files found"
          exit 1
        fi
        
        echo "📄 Found manifest files:"
        echo "$MANIFEST_FILES"
        
        # Verify each manifest
        VALID_MANIFESTS=0
        TOTAL_MANIFESTS=0
        
        for manifest in $MANIFEST_FILES; do
          TOTAL_MANIFESTS=$((TOTAL_MANIFESTS + 1))
          echo "🔍 Verifying manifest: $manifest"
          
          # Check if manifest is valid JSON
          if jq empty "$manifest" 2>/dev/null; then
            echo "✅ Manifest $manifest is valid JSON"
            VALID_MANIFESTS=$((VALID_MANIFESTS + 1))
          else
            echo "❌ Manifest $manifest is invalid JSON"
          fi
        done
        
        echo "manifest_valid=$VALID_MANIFESTS" >> $GITHUB_OUTPUT
        echo "manifest_total=$TOTAL_MANIFESTS" >> $GITHUB_OUTPUT
        
        if [ $VALID_MANIFESTS -eq $TOTAL_MANIFESTS ] && [ $TOTAL_MANIFESTS -gt 0 ]; then
          echo "✅ All C2PA manifests are valid"
        else
          echo "❌ Some C2PA manifests are invalid"
          exit 1
        fi
        
    - name: Verify zero-knowledge proofs
      id: verify-zkvm
      run: |
        echo "🔐 Verifying zero-knowledge proofs..."
        
        # Find all proof files
        PROOF_FILES=$(find submissions -name "*.proof" -o -name "*.zkproof" -type f)
        
        if [ -z "$PROOF_FILES" ]; then
          echo "❌ No zero-knowledge proof files found"
          exit 1
        fi
        
        echo "🔐 Found proof files:"
        echo "$PROOF_FILES"
        
        # Verify each proof using our mock script
        VALID_PROOFS=0
        TOTAL_PROOFS=0
        
        for proof in $PROOF_FILES; do
          TOTAL_PROOFS=$((TOTAL_PROOFS + 1))
          echo "🔍 Verifying proof: $proof"
          
          # Mock verification - in reality this would use Nexus zkVM
          PROOF_HASH=$(cat "$proof" | head -c 64)
          if [ ${#PROOF_HASH} -eq 64 ]; then
            echo "✅ Proof $proof has valid hash format"
            VALID_PROOFS=$((VALID_PROOFS + 1))
          else
            echo "❌ Proof $proof has invalid hash format"
          fi
        done
        
        echo "proof_valid=$VALID_PROOFS" >> $GITHUB_OUTPUT
        echo "proof_total=$TOTAL_PROOFS" >> $GITHUB_OUTPUT
        
        if [ $VALID_PROOFS -eq $TOTAL_PROOFS ] && [ $TOTAL_PROOFS -gt 0 ]; then
          echo "✅ All zero-knowledge proofs are valid"
        else
          echo "❌ Some zero-knowledge proofs are invalid"
          exit 1
        fi
        
    - name: Check image metadata
      id: verify-images
      run: |
        echo "🖼️ Checking image metadata..."
        
        # Find all image files
        IMAGE_FILES=$(find submissions -name "*.jpg" -o -name "*.png" -o -name "*.jpeg" -o -name "*.webp" -type f)
        
        if [ -z "$IMAGE_FILES" ]; then
          echo "❌ No image files found"
          exit 1
        fi
        
        echo "🖼️ Found image files:"
        echo "$IMAGE_FILES"
        
        # Check each image
        VALID_IMAGES=0
        TOTAL_IMAGES=0
        
        for image in $IMAGE_FILES; do
          TOTAL_IMAGES=$((TOTAL_IMAGES + 1))
          echo "🔍 Checking image: $image"
          
          # Check if file exists and has content
          if [ -s "$image" ]; then
            # Get file size
            SIZE=$(stat -c%s "$image")
            echo "📏 Image size: $SIZE bytes"
            
            if [ $SIZE -gt 0 ]; then
              echo "✅ Image $image is valid"
              VALID_IMAGES=$((VALID_IMAGES + 1))
            else
              echo "❌ Image $image is empty"
            fi
          else
            echo "❌ Image $image is invalid or empty"
          fi
        done
        
        echo "image_valid=$VALID_IMAGES" >> $GITHUB_OUTPUT
        echo "image_total=$TOTAL_IMAGES" >> $GITHUB_OUTPUT
        
        if [ $VALID_IMAGES -eq $TOTAL_IMAGES ] && [ $TOTAL_IMAGES -gt 0 ]; then
          echo "✅ All images are valid"
        else
          echo "❌ Some images are invalid"
          exit 1
        fi
        
    - name: Verify submission structure
      id: verify-structure
      run: |
        echo "📁 Verifying submission structure..."
        
        # Check for required files in each submission
        SUBMISSION_DIRS=$(find submissions -type d -mindepth 1 -maxdepth 1)
        
        if [ -z "$SUBMISSION_DIRS" ]; then
          echo "❌ No submission directories found"
          exit 1
        fi
        
        VALID_SUBMISSIONS=0
        TOTAL_SUBMISSIONS=0
        
        for dir in $SUBMISSION_DIRS; do
          TOTAL_SUBMISSIONS=$((TOTAL_SUBMISSIONS + 1))
          echo "🔍 Checking submission: $dir"
          
          # Check for required files
          HAS_IMAGE=$(find "$dir" -name "*.jpg" -o -name "*.png" -o -name "*.jpeg" -o -name "*.webp" | wc -l)
          HAS_MANIFEST=$(find "$dir" -name "*.json" | wc -l)
          HAS_PROOF=$(find "$dir" -name "*.proof" -o -name "*.zkproof" | wc -l)
          HAS_METADATA=$(find "$dir" -name "metadata.json" | wc -l)
          
          if [ $HAS_IMAGE -gt 0 ] && [ $HAS_MANIFEST -gt 0 ] && [ $HAS_PROOF -gt 0 ]; then
            echo "✅ Submission $dir has all required files"
            VALID_SUBMISSIONS=$((VALID_SUBMISSIONS + 1))
          else
            echo "❌ Submission $dir is missing required files"
            echo "  Images: $HAS_IMAGE, Manifests: $HAS_MANIFEST, Proofs: $HAS_PROOF"
          fi
        done
        
        echo "submission_valid=$VALID_SUBMISSIONS" >> $GITHUB_OUTPUT
        echo "submission_total=$TOTAL_SUBMISSIONS" >> $GITHUB_OUTPUT
        
        if [ $VALID_SUBMISSIONS -eq $TOTAL_SUBMISSIONS ] && [ $TOTAL_SUBMISSIONS -gt 0 ]; then
          echo "✅ All submissions have proper structure"
        else
          echo "❌ Some submissions have invalid structure"
          exit 1
        fi
        
    - name: Generate verification report
      run: |
        echo "📊 Generating verification report..."
        
        cat > verification-report.md << EOF
        # 🔍 Image Submission Verification Report
        
        ## 📋 Summary
        - **Submission Date**: $(date)
        - **PR Number**: ${{ github.event.number }}
        - **Author**: ${{ github.event.pull_request.user.login }}
        - **Branch**: ${{ github.head_ref }}
        
        ## ✅ Verification Results
        
        ### C2PA Manifests
        - **Status**: ${{ steps.verify-c2pa.outputs.manifest_valid }}/${{ steps.verify-c2pa.outputs.manifest_total }} valid
        - **Result**: ${{ steps.verify-c2pa.outputs.manifest_valid == steps.verify-c2pa.outputs.manifest_total && '✅ All valid' || '❌ Some invalid' }}
        
        ### Zero-Knowledge Proofs
        - **Status**: ${{ steps.verify-zkvm.outputs.proof_valid }}/${{ steps.verify-zkvm.outputs.proof_total }} valid
        - **Result**: ${{ steps.verify-zkvm.outputs.proof_valid == steps.verify-zkvm.outputs.proof_total && '✅ All valid' || '❌ Some invalid' }}
        
        ### Images
        - **Status**: ${{ steps.verify-images.outputs.image_valid }}/${{ steps.verify-images.outputs.image_total }} valid
        - **Result**: ${{ steps.verify-images.outputs.image_valid == steps.verify-images.outputs.image_total && '✅ All valid' || '❌ Some invalid' }}
        
        ### Submission Structure
        - **Status**: ${{ steps.verify-structure.outputs.submission_valid }}/${{ steps.verify-structure.outputs.submission_total }} valid
        - **Result**: ${{ steps.verify-structure.outputs.submission_valid == steps.verify-structure.outputs.submission_total && '✅ All valid' || '❌ Some invalid' }}
        
        ## 🚀 Next Steps
        
        1. **Community Review**: Community members will review this submission
        2. **Voting**: Community voting will determine final verification status
        3. **Gallery Integration**: If approved, images will be added to the public gallery
        4. **Rewards**: Verified submissions may earn Nexus testnet rewards
        
        ## 🔗 Links
        
        - [View Gallery](https://your-domain.com/gallery)
        - [Submit More Images](https://your-domain.com/submit)
        - [Leaderboard](https://your-domain.com/leaderboard)
        
        ---
        
        *This verification was performed automatically by GitHub Actions using Nexus zkVM.*
        EOF
        
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('verification-report.md', 'utf8');
          
          // Check if verification passed
          const allValid = '${{ steps.verify-c2pa.outputs.manifest_valid == steps.verify-c2pa.outputs.manifest_total && steps.verify-zkvm.outputs.proof_valid == steps.verify-zkvm.outputs.proof_total && steps.verify-images.outputs.image_valid == steps.verify-images.outputs.image_total && steps.verify-structure.outputs.submission_valid == steps.verify-structure.outputs.submission_total }}';
          
          const status = allValid === 'true' ? '✅ **VERIFICATION PASSED**' : '❌ **VERIFICATION FAILED**';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `${status}\n\n${report}`
          });
          
    - name: Set PR status
      if: always()
      run: |
        if [ "${{ steps.verify-c2pa.outputs.manifest_valid == steps.verify-c2pa.outputs.manifest_total && steps.verify-zkvm.outputs.proof_valid == steps.verify-zkvm.outputs.proof_total && steps.verify-images.outputs.image_valid == steps.verify-images.outputs.image_total && steps.verify-structure.outputs.submission_valid == steps.verify-structure.outputs.submission_total }}" == "true" ]; then
          echo "✅ All verifications passed"
        else
          echo "❌ Some verifications failed"
          exit 1
        fi
